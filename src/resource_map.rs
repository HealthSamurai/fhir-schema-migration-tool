const AIDBOX_CUSTOM_TYPES: [(&'static str, &'static str); 84] = [
    (
        "AccessPolicy",
        "http://aidbox.app/StructureDefinition/AccessPolicy",
    ),
    (
        "AidboxArchive",
        "http://aidbox.app/StructureDefinition/AidboxArchive",
    ),
    (
        "AidboxConfig",
        "http://aidbox.app/StructureDefinition/AidboxConfig",
    ),
    (
        "AidboxJob",
        "http://aidbox.app/StructureDefinition/AidboxJob",
    ),
    (
        "AidboxJobStatus",
        "http://aidbox.app/StructureDefinition/AidboxJobStatus",
    ),
    (
        "AidboxLinkageModel",
        "https://fhir.aidbox.app/mdm/StructureDefinition/AidboxLinkageModel",
    ),
    (
        "AidboxMigration",
        "http://aidbox.app/StructureDefinition/AidboxMigration",
    ),
    (
        "AidboxProfile",
        "http://aidbox.app/StructureDefinition/AidboxProfile",
    ),
    (
        "AidboxQuery",
        "http://aidbox.app/StructureDefinition/AidboxQuery",
    ),
    ("AidboxSubscription", "AidboxSubscription"),
    (
        "AidboxSubscriptionStatus",
        "http://aidbox.app/StructureDefinition/AidboxSubscriptionStatus",
    ),
    (
        "AidboxSubscriptionTopic",
        "http://aidbox.app/StructureDefinition/AidboxSubscriptionTopic",
    ),
    (
        "AidboxTask",
        "http://aidbox.app/StructureDefinition/AidboxTask",
    ),
    (
        "AidboxTaskLog",
        "http://aidbox.app/StructureDefinition/AidboxTaskLog",
    ),
    (
        "AidboxTopicDestination",
        "http://aidbox.app/StructureDefinition/AidboxTopicDestination",
    ),
    (
        "AidboxTopicDestination",
        "http://aidbox.app/StructureDefinition/aidboxtopicdestination-gcp-pubsub-at-least-once",
    ),
    (
        "AidboxTopicDestination",
        "http://aidbox.app/StructureDefinition/aidboxtopicdestination-kafka-at-least-once",
    ),
    (
        "AidboxTopicDestination",
        "http://aidbox.app/StructureDefinition/aidboxtopicdestination-kafka-at-least-once-mock",
    ),
    (
        "AidboxTopicDestination",
        "http://aidbox.app/StructureDefinition/aidboxtopicdestination-kafka-best-effort",
    ),
    (
        "AidboxTopicDestination",
        "http://aidbox.app/StructureDefinition/aidboxtopicdestination-kafka-best-effort-mock",
    ),
    (
        "AidboxTopicDestination",
        "http://aidbox.app/StructureDefinition/aidboxtopicdestination-webhook-at-least-once",
    ),
    (
        "AidboxTrigger",
        "https://fhir.aidbox.app/aidbox_trigger/StructureDefinition/AidboxTrigger",
    ),
    (
        "AidboxWorkflow",
        "http://aidbox.app/StructureDefinition/AidboxWorkflow",
    ),
    ("App", "http://aidbox.app/StructureDefinition/App"),
    ("Attribute", "Attribute"),
    (
        "AuthConfig",
        "http://aidbox.app/StructureDefinition/AuthConfig",
    ),
    ("AwsAccount", "AwsAccount"),
    ("AzureAccount", "AzureAccount"),
    ("AzureContainer", "AzureContainer"),
    (
        "BatchValidationError",
        "http://aidbox.app/StructureDefinition/BatchValidationError",
    ),
    (
        "BatchValidationRun",
        "http://aidbox.app/StructureDefinition/BatchValidationRun",
    ),
    (
        "BulkExportStatus",
        "http://aidbox.app/StructureDefinition/BulkExportStatus",
    ),
    (
        "BulkImportStatus",
        "http://aidbox.app/StructureDefinition/BulkImportStatus",
    ),
    ("Client", "http://aidbox.app/StructureDefinition/Client"),
    ("Concept", "http://aidbox.app/StructureDefinition/Concept"),
    ("ConceptMapRule", "ConceptMapRule"),
    (
        "DisabledIndex",
        "http://aidbox.app/StructureDefinition/DisabledIndex",
    ),
    ("Entity", "Entity"),
    (
        "Extension",
        "http://fhir.aidbox.app/fhir/StructureDefintion/legacy-fce",
    ),
    ("Extension", "https://aidbox.app/tenant-organization-id"),
    ("Extension", "https://aidbox.app/tenant-resource-mode"),
    ("FlatImportStatus", "FlatImportStatus"),
    ("FtrConfig", "FtrConfig"),
    ("GcpServiceAccount", "GcpServiceAccount"),
    ("Grant", "http://aidbox.app/StructureDefinition/Grant"),
    (
        "Hl7v2Config",
        "http://aidbox.app/StructureDefinition/Hl7v2Config",
    ),
    (
        "Hl7v2Message",
        "http://aidbox.app/StructureDefinition/Hl7v2Message",
    ),
    (
        "IdentityProvider",
        "http://aidbox.app/StructureDefinition/IdentityProvider",
    ),
    ("IndexCreationJob", "IndexCreationJob"),
    ("Lambda", "Lambda"),
    (
        "LoaderFile",
        "http://aidbox.app/StructureDefinition/LoaderFile",
    ),
    ("Mapping", "Mapping"),
    ("Module", "http://aidbox.app/StructureDefinition/Module"),
    ("Notebook", "Notebook"),
    (
        "Notification",
        "http://aidbox.app/StructureDefinition/Notification",
    ),
    (
        "NotificationTemplate",
        "http://aidbox.app/StructureDefinition/NotificationTemplate",
    ),
    (
        "Operation",
        "http://aidbox.app/StructureDefinition/Operation",
    ),
    (
        "PGSequence",
        "http://aidbox.app/StructureDefinition/PGSequence",
    ),
    (
        "QuestionnaireTheme",
        "http://aidbox.app/StructureDefinition/sdc/QuestionnaireTheme",
    ),
    (
        "Registration",
        "http://aidbox.app/StructureDefinition/Registration",
    ),
    ("Role", "http://aidbox.app/StructureDefinition/Role"),
    (
        "SDCAddendum",
        "http://aidbox.app/StructureDefinition/sdc/SDCAddendum",
    ),
    (
        "SDCConfig",
        "http://aidbox.app/StructureDefinition/sdc/SDCConfig",
    ),
    (
        "SDCDocument",
        "http://aidbox.app/StructureDefinition/sdc/SDCDocument",
    ),
    (
        "SDCFormMetadata",
        "http://aidbox.app/StructureDefinition/sdc/SDCFormMetadata",
    ),
    (
        "SDCFormVersion",
        "http://aidbox.app/StructureDefinition/SDCFormVersion",
    ),
    (
        "SDCPrintTemplate",
        "http://aidbox.app/StructureDefinition/sdc/SDCPrintTemplate",
    ),
    (
        "SDCWorkflow",
        "http://aidbox.app/StructureDefinition/sdc/SDCWorkflow",
    ),
    (
        "SDCWorkflowVersion",
        "http://aidbox.app/StructureDefinition/sdc/SDCWorkflowVersion",
    ),
    (
        "SchedulerRuleStatus",
        "http://aidbox.app/StructureDefinition/SchedulerRuleStatus",
    ),
    ("Scope", "http://aidbox.app/StructureDefinition/Scope"),
    ("Search", "http://aidbox.app/StructureDefinition/Search"),
    (
        "SearchQuery",
        "http://aidbox.app/StructureDefinition/SearchQuery",
    ),
    ("SeedImport", "SeedImport"),
    ("Session", "http://aidbox.app/StructureDefinition/Session"),
    ("SubsNotification", "SubsNotification"),
    ("SubsSubscription", "SubsSubscription"),
    ("TerminologyBundleFile", "TerminologyBundleFile"),
    (
        "TokenIntrospector",
        "http://aidbox.app/StructureDefinition/TokenIntrospector",
    ),
    ("User", "http://aidbox.app/StructureDefinition/User"),
    (
        "ViewDefinition",
        "http://hl7.org/fhir/uv/sql-on-fhir/StructureDefinition/ViewDefinition",
    ),
    ("WebPushSubscription", "WebPushSubscription"),
    ("ui_history", "ui_history"),
    ("ui_snippet", "ui_snippet"),
];

const FHIR_TYPES: [&'static str; 231] = [
    "Base",
    "Element",
    "BackboneElement",
    "DataType",
    "Address",
    "Annotation",
    "Attachment",
    "Availability",
    "BackboneType",
    "Dosage",
    "ElementDefinition",
    "MarketingStatus",
    "ProductShelfLife",
    "Timing",
    "CodeableConcept",
    "CodeableReference",
    "Coding",
    "ContactDetail",
    "ContactPoint",
    "Contributor",
    "DataRequirement",
    "Expression",
    "ExtendedContactDetail",
    "Extension",
    "HumanName",
    "Identifier",
    "Meta",
    "MonetaryComponent",
    "Money",
    "Narrative",
    "ParameterDefinition",
    "Period",
    "PrimitiveType",
    "base64Binary",
    "boolean",
    "date",
    "dateTime",
    "decimal",
    "instant",
    "integer",
    "positiveInt",
    "unsignedInt",
    "integer64",
    "string",
    "code",
    "id",
    "markdown",
    "time",
    "uri",
    "canonical",
    "oid",
    "url",
    "uuid",
    "Quantity",
    "Age",
    "Count",
    "Distance",
    "Duration",
    "Range",
    "Ratio",
    "RatioRange",
    "Reference",
    "RelatedArtifact",
    "SampledData",
    "Signature",
    "TriggerDefinition",
    "UsageContext",
    "VirtualServiceDetail",
    "xhtml",
    "Resource",
    "Binary",
    "Bundle",
    "DomainResource",
    "Account",
    "ActivityDefinition",
    "ActorDefinition",
    "AdministrableProductDefinition",
    "AdverseEvent",
    "AllergyIntolerance",
    "Appointment",
    "AppointmentResponse",
    "ArtifactAssessment",
    "AuditEvent",
    "Basic",
    "BiologicallyDerivedProduct",
    "BiologicallyDerivedProductDispense",
    "BodyStructure",
    "CanonicalResource",
    "CapabilityStatement",
    "CarePlan",
    "CareTeam",
    "ChargeItem",
    "ChargeItemDefinition",
    "Citation",
    "Claim",
    "ClaimResponse",
    "ClinicalImpression",
    "ClinicalUseDefinition",
    "CodeSystem",
    "Communication",
    "CommunicationRequest",
    "CompartmentDefinition",
    "Composition",
    "ConceptMap",
    "Condition",
    "ConditionDefinition",
    "Consent",
    "Contract",
    "Coverage",
    "CoverageEligibilityRequest",
    "CoverageEligibilityResponse",
    "DetectedIssue",
    "Device",
    "DeviceAssociation",
    "DeviceDefinition",
    "DeviceDispense",
    "DeviceMetric",
    "DeviceRequest",
    "DeviceUsage",
    "DiagnosticReport",
    "DocumentReference",
    "Encounter",
    "EncounterHistory",
    "Endpoint",
    "EnrollmentRequest",
    "EnrollmentResponse",
    "EpisodeOfCare",
    "EventDefinition",
    "Evidence",
    "EvidenceReport",
    "EvidenceVariable",
    "ExampleScenario",
    "ExplanationOfBenefit",
    "FamilyMemberHistory",
    "Flag",
    "FormularyItem",
    "GenomicStudy",
    "Goal",
    "GraphDefinition",
    "Group",
    "GuidanceResponse",
    "HealthcareService",
    "ImagingSelection",
    "ImagingStudy",
    "Immunization",
    "ImmunizationEvaluation",
    "ImmunizationRecommendation",
    "ImplementationGuide",
    "Ingredient",
    "InsurancePlan",
    "InventoryItem",
    "InventoryReport",
    "Invoice",
    "Library",
    "Linkage",
    "List",
    "Location",
    "ManufacturedItemDefinition",
    "Measure",
    "MeasureReport",
    "Medication",
    "MedicationAdministration",
    "MedicationDispense",
    "MedicationKnowledge",
    "MedicationRequest",
    "MedicationStatement",
    "MedicinalProductDefinition",
    "MessageDefinition",
    "MessageHeader",
    "MetadataResource",
    "MolecularSequence",
    "NamingSystem",
    "NutritionIntake",
    "NutritionOrder",
    "NutritionProduct",
    "Observation",
    "ObservationDefinition",
    "OperationDefinition",
    "OperationOutcome",
    "Organization",
    "OrganizationAffiliation",
    "PackagedProductDefinition",
    "Patient",
    "PaymentNotice",
    "PaymentReconciliation",
    "Permission",
    "Person",
    "PlanDefinition",
    "Practitioner",
    "PractitionerRole",
    "Procedure",
    "Provenance",
    "Questionnaire",
    "QuestionnaireResponse",
    "RegulatedAuthorization",
    "RelatedPerson",
    "RequestOrchestration",
    "Requirements",
    "ResearchStudy",
    "ResearchSubject",
    "RiskAssessment",
    "Schedule",
    "SearchParameter",
    "ServiceRequest",
    "Slot",
    "Specimen",
    "SpecimenDefinition",
    "StructureDefinition",
    "StructureMap",
    "Subscription",
    "SubscriptionStatus",
    "SubscriptionTopic",
    "Substance",
    "SubstanceDefinition",
    "SubstanceNucleicAcid",
    "SubstancePolymer",
    "SubstanceProtein",
    "SubstanceReferenceInformation",
    "SubstanceSourceMaterial",
    "SupplyDelivery",
    "SupplyRequest",
    "Task",
    "TerminologyCapabilities",
    "TestPlan",
    "TestReport",
    "TestScript",
    "Transport",
    "ValueSet",
    "VerificationResult",
    "VisionPrescription",
    "Parameters",
];

pub fn get_type_url(typename: &str) -> Option<String> {
    if let Some((_typename, url)) = AIDBOX_CUSTOM_TYPES
        .into_iter()
        .find(|(aidbox_typename, _)| *aidbox_typename == typename)
    {
        return Some(url.to_owned());
    }

    if let Some(fhir_typename) = FHIR_TYPES
        .into_iter()
        .find(|fhir_typename| *fhir_typename == typename)
    {
        return Some(format!(
            "http://hl7.org/fhir/StructureDefinition/{fhir_typename}"
        ));
    }

    None
}

pub fn is_known_type(typename: &str) -> bool {
    FHIR_TYPES.contains(&typename)
        || AIDBOX_CUSTOM_TYPES
            .into_iter()
            .any(|(aidbox_typename, _url)| typename == aidbox_typename)
}
